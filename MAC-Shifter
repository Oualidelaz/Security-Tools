# ################ How to use : #####################################

# Change MAC -------------------------------------------------------
# sudo python script.py start -i eth0  

# Restore original MAC ---------------------------------------------
# sudo python script.py stop -i eth0

# ###################################################################

import random
import re
import subprocess
import os
import sys
import time
import argparse
import json
from typing import Optional
import logging
from datetime import datetime
from colorama import init, Fore, Back, Style

init(autoreset=True)

class MacChanger:
    def __init__(self):
        self.logger = self._setup_logger()
        self.original_mac = None
        self.current_mac = None # after changing
        self.interface = None
        self.mac_store_file = os.path.expanduser('~/.mac_store.json')
        self._load_stored_mac()
    
    def _setup_logger(self) -> logging.Logger:
        logger = logging.getLogger('MacChanger')
        logger.setLevel(logging.INFO)
        
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
	    
        log_dir = 'logs'
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
            
        file_handler = logging.FileHandler(
            f'logs/mac_changer_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
        )
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        return logger

    def _load_stored_mac(self):
        """تحميل الماك المخزن من الملف"""
        if os.path.exists(self.mac_store_file):
            try:
                with open(self.mac_store_file, 'r') as f:
                    data = json.load(f)
                    self.original_mac = data.get('original_mac')
                    self.interface = data.get('interface')
            except:
                pass

    def _save_mac_info(self):
        """حفظ معلومات الماك في ملف"""
        try:
            with open(self.mac_store_file, 'w') as f:
                json.dump({
                    'original_mac': self.original_mac,
                    'interface': self.interface
                }, f)
        except Exception as e:
            self.logger.error(f"Error in saving Mac information: {e}")

    def _validate_interface(self, interface: str) -> bool:
        try:
            result = subprocess.check_output(['ifconfig']).decode()
            return interface in result
        except:
            return False

    def _get_current_mac(self, interface: str) -> Optional[str]:
        try:
            result = subprocess.check_output(['ifconfig', interface]).decode()
            # Mac address Regular Expression 
            mac_search = re.search(r'ether\s+([0-9a-fA-F]:?){12}', result)
            if mac_search:
                return mac_search.group().split()[1]
            return None
        except:
            return None

    def _generate_random_mac(self) -> str:
	    # 0x00 = 0  and 0xff = 255
        mac = [random.randint(0x00, 0xff) for _ in range(6)]
        # This & and 0xfc is rules for generate a valide random mac address 
        mac[0] &= 0xfc
        # For return string  uing Mac address Format 
        return ':'.join(['%02x' % x for x in mac])

    def _change_mac(self, interface: str, new_mac: str) -> bool:
        try:
            subprocess.call(['ifconfig', interface, 'down'])
            subprocess.call(['ifconfig', interface, 'hw', 'ether', new_mac])
            subprocess.call(['ifconfig', interface, 'up'])
            return True
        except:
            return False

    def start(self, interface: str) -> None:

        try:
            with open("/etc/shadow", "r"):
                pass
        except PermissionError:
            self.logger.error("You need to run the program as root.")
            print("🚫 You need to run the program as root")
            sys.exit(1)

        if not self._validate_interface(interface):
            self.logger.error(f"The interface {interface} is not available")
            print(f"❌ The interface {interface} is not available")
            sys.exit(1)

        self.interface = interface
        current_mac = self._get_current_mac(interface)
        
        # حفظ الماك الأصلي لو مكنش متخزن قبل كده
        if not self.original_mac:
            self.original_mac = current_mac
            self._save_mac_info()
        
        if not current_mac:
            self.logger.error(f"We couldn't get the Mac {interface}")
            print(f"❌ We couldn't get the Mac {interface}")
            sys.exit(1)

        new_mac = self._generate_random_mac()
        if self._change_mac(interface, new_mac):
            self.current_mac = new_mac
            self.logger.info(f"The Mac has been changed from {current_mac} to {new_mac}")
            print(f"✅ The Mac has been changed from {current_mac} to {new_mac}")
        else:
            self.logger.error("There was an issue with changing the Mac")
            print("❌ There was an issue with changing the Mac")

    def stop(self) -> None:
        if not self.original_mac or not self.interface:
            self._load_stored_mac()  # محاولة تحميل البيانات المخزنة
            if not self.original_mac or not self.interface:
                print("❌ There is no original MAC registered")
                return

        if self._change_mac(self.interface, self.original_mac):
            self.logger.info(f"The original Mac has been returned{self.original_mac}")
            print(f"✅ The original Mac has been returned {self.original_mac}")
            
            # مسح الملف بعد إرجاع الماك الأصلي
            if os.path.exists(self.mac_store_file):
                os.remove(self.mac_store_file)
        else:
            self.logger.error("There was an issue with returning the original Mac")
            print("❌ There was an issue with returning the original Mac")

def main():

    try:
        with open("/etc/shadow", "r"):
            pass
    except PermissionError:
        print("🚫 You need to run the program as root")
        sys.exit(1)
							 
    parser = argparse.ArgumentParser(description='Mac Changer - Tool to change the MAC address')
    
    parser.add_argument('action', choices=['start', 'stop'], help='start To start the change, type "stop" to revert to the original Mac.')
    
    parser.add_argument('-i', '--interface', help='Network Interface Name', required=True)
    
    args = parser.parse_args()
    
    mac_changer = MacChanger()
    
    try:
        if args.action == 'start':
            mac_changer.start(args.interface)
        else:
            mac_changer.stop()
    except KeyboardInterrupt:
        print("\n👋 The program has been stopped")
        mac_changer.stop()

if __name__ == '__main__':
    print(f"""{Fore.CYAN + Style.BRIGHT}
      
▒█████   ██▓  ██   ▄▄▄       ██▓    
▒██▒  ██▒▓██░  ██▒▒████▄    ▓██▒    
▒██░  ██▒▓██░ ██▓▒▒██  ▀█▄  ▒██░    
▒██   ██░▒██▄█▓▒ ▒░██▄▄▄▄██ ▒██░    
░ ████▓▒░▒██▒ ░  ░ ▓█   ▓██▒░██████▒
░ ▒░▒░▒░ ▒▓▒░ ░  ░ ▒▒   ▓▒█░░ ▒░▓  ░
░ ▒ ▒░  ░▒ ░       ▒   ▒▒ ░░ ░ ▒  ░
░ ░ ░ ▒   ░░         ░   ▒     ░ ░   
    ░ ░                 ░  ░      ░  ░
███████╗     ▄▄▄      ▒███████╗
██╔════╝    ▒████▄    ▒ ▒ ▒ ▄▀░
█████╗      ▒██  ▀█▄  ░ ▒ ▄▀▒░ 
██╔══╝      ░██▄▄▄▄██   ▄▀▒   ░
███████╗     ▓█   ▓██▒▒███████▒
╚══════╝     ▒▒   ▓▒█░░▒▒ ▓░▒░▒
                ▒   ▒▒ ░░░▒ ▒ ░ ▒
                ░   ▒   ░ ░ ░ ░ ░
                    ░  ░  ░ ░    
                        ░      
{Style.RESET_ALL}""")

    print(f"{Fore.YELLOW}[{Fore.RED}+{Fore.YELLOW}] Mac Address Changer Tool{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}[{Fore.BLUE}+{Fore.YELLOW}] Created by: {Fore.RED}oual.e.az{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}[{Fore.GREEN}+{Fore.YELLOW}] Version: {Fore.CYAN}1.0.0{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}={'='*48}{Style.RESET_ALL}")

    main()

